        <div class="mx-auto ms-lg-80 ps-lg-4">
          <% for (let error of errors) { %>
            <div class="alert alert-danger" role="alert"><%= error.message %></div>
            <% } %> <% if(message.success){ %>
            <div class="alert alert-success" role="alert"><%= message.success %></div>
            <% } %>
          <section>
            <div class="p-8 bg-white navbar-light">
              <div class="row align-items-center justify-content-between">
                <div class="col-12 col-lg-6 mb-4 mb-lg-0">
                  <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                      <li class="breadcrumb-item" aria-current="page">
                        <a class="d-flex align-items-center" href="#">
                          <svg class="text-primary me-2" width="20" height="20" viewbox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M16.8737 16.875V9.02647C16.8737 8.93939 16.8555 8.85327 16.8202 8.77363C16.785 8.694 16.7335 8.6226 16.6691 8.56402L10.4187 2.88159C10.3036 2.77699 10.1537 2.71904 9.99821 2.71904C9.84272 2.71905 9.69281 2.77701 9.57777 2.88162L3.3282 8.56402C3.26377 8.6226 3.2123 8.69399 3.17707 8.77363C3.14185 8.85326 3.12366 8.93937 3.12366 9.02645V16.875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M1.24866 16.875H18.7487" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M11.8732 16.8743V12.4993C11.8732 12.3336 11.8073 12.1746 11.6901 12.0574C11.5729 11.9402 11.4139 11.8743 11.2482 11.8743H8.74817C8.58241 11.8743 8.42344 11.9402 8.30623 12.0574C8.18902 12.1746 8.12317 12.3336 8.12317 12.4993V16.8743" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                          </svg>
                          <span>Inventory Management</span>
                        </a>
                      </li>
                      <li class="breadcrumb-item active" aria-current="page">
                        <a class="d-flex align-items-center" href="#">
                          <svg class="text-primary me-2" width="20" height="20" viewbox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M17.8125 16.25H2.1875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M7.8125 16.25V6.875H12.1875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M16.5625 3.125H12.1875V16.25H16.5625V3.125Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                            <path d="M3.4375 16.25V10.625H7.8125" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                          </svg>
                          <span>Stock Management</span>
                        </a>
                      </li>
                    </ol>
                  </nav>
                </div>
               
              </div>
            </div>
          </section>
    
      <div class="container">
        <!-- New Batch Modal Button -->
        <button type="button" class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#newStockModal">
            <i class="fas fa-plus"></i> Record New Batch
        </button>
      <br></br>
        <div class="row">
          <div class="col-md-4">
            <div class="input-group">
              <input type="date" id="fromDate" class="form-control" placeholder="From date">
              <input type="date" id="toDate" class="form-control" placeholder="To date">
              <button id="goButton" class="btn btn-primary" onclick="updateTable('<%= JSON.stringify(stock) %>','<%= JSON.stringify(stock_products) %>')">Go</button>
            </div>
          </div>
          <div class="col-md-4">
            <input type="text" id="searchInput" class="form-control" placeholder="Search...">
          </div>
          <div class="col-md-4">
            <button type="button" class="btn btn-primary mt-3" onclick="exportToExcel1()"> <i class="fas fa-cog"></i> Generate Report
            </button>
          </div> 
          </div>
      
        <!-- Nav Tabs -->
        <ul class="nav nav-tabs mt-3" id="requisitionTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link active" id="pending-tab" data-bs-toggle="tab" href="#pending" role="tab" aria-controls="pending" aria-selected="true">Purchases</a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link" id="completed-tab" data-bs-toggle="tab" href="#completed" role="tab" aria-controls="completed" aria-selected="false">Reorder Levels</a>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="requisitionTabsContent">
            <!-- Pending Requisitions Tab -->
            <div class="tab-pane fade show active" id="pending" role="tabpanel" aria-labelledby="pending-tab">
                <h2 class="mt-3">Purchases</h2>
                <!-- Table for pending requisitions goes here -->
                <table class="table table-striped table-hover">
                  <thead class="table-primary">
                    <tr>
                      <th>Date</th>
                      <th>Reference Number</th>
                      <th>Number of Products</th>
                      <th>Supplier</th>
                      <th>Warehouse</th>
                      <th>Actions</th>
                    </tr>
                  </thead> 
                  <tbody id="alex">
                    <!-- Example rows with data -->
                    <% if (stock) { %> <% for (let dat of stock) { %>
                    <tr>
                      <td><%=  moment(dat.stock_date).format('DD/MM/YY') %></td>
                      <td><%= dat.stock_id %></td>
                      <td><% 
                        let productCount = 0;
                        for (let productData of stock_products) {
                          if (productData.stock_id === dat.stock_id) {
                            productCount++;
                          }
                        }
                      %>
                      <%= productCount %></td>
                      <td><%= dat.supplier %></td>
                      <td><%= dat.warehouse %></td>
                      <td>
                        <a href="#" class="btn btn-primary btn-sm view-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="openViewModal('<%= dat.stock_date %>','<%=  dat.stock_id %>','<%=  dat.supplier %>','<%=  dat.warehouse %>','<%=  JSON.stringify(stock_products) %>', '<%= productCount %>')">View</a>
                        <a href="#" class="btn btn-danger btn-sm">Delete</a>
                      </td>
                    </tr>
                    <% } %><% } %>
                    <!-- Add more rows as needed -->
                  </tbody>
                </table>
                
            </div>

            <!-- Completed Requisitions Tab -->
            <div class="tab-pane fade" id="completed" role="tabpanel" aria-labelledby="completed-tab">
                <h2 class="mt-3">Reorder Level</h2>
                <!-- Table for completed requisitions goes here -->
                <input class="form-control mb-2 table-search" id="" type="text" placeholder="Search...">
                <div class="table-responsive border rounded">
                
               
                                               
          <table class="table table-hover table-striped mb-0">
            <thead>
              <tr>
                <th>Product ID</th>
                <th>Product</th>
                <th>Unit Measure</th>
                <th>Reorder Level</th>
                <th>Current Stock Level</th>
                <th>Stock Level Bar</th>
                <th>Last Stock In Date</th>
                <th>Last Issue Date</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody >
              <% if (prods) { %> <% for (let dat of prods) { %>
              <tr>
                <td><%= dat.id %></td>
                <td><%= dat.product_name %></td>
                <td><%= dat.unit %></td>
                <td><%= dat.reorder_level %></td>
                <td>
                <%= dat.total_quantity %></td>
                <td>
                  <div class="progress progress-bar-xs mb-0 ">
                    <div class="progress-bar progress-bar-danger" style="width: 35%"></div>
                  </div>
                </td>
                <td><%= moment(dat.last_stock_in_date).format('Do MMMM, YYYY') %></td>
                <td>-</td>
                <td>
                  <a href="#" class="btn btn-icon btn-rounded btn-flush-primary flush-soft-hover" data-bs-toggle="modal" data-bs-target="#reorderModal" onclick="reorderLevel('<%= dat.id %>')" data-bs-original-title="Edit">
                    <span class="icon"><i class="fas fa-edit"></i></span>
                </a>
                  <a href="#" class="btn btn-icon btn-rounded btn-flush-danger flush-soft-hover" data-bs-toggle="tooltip" data-bs-original-title="Delete">
                    <span class="icon"><i class="fas fa-trash"></i></span>
                  </a>
                </td>
                
              </tr>
              <% } %>
             <% } %>  
            </tbody>
            </table>
            </div>
            
        </div>
    </div>
     <!-- New Reorder Level Modal -->
     <div class="modal fade" id="reorderModal" tabindex="-1" role="dialog" aria-labelledby="reorderModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
          <div class="modal-content">
              <div class="modal-header">
                 
              </div>
              <div class="modal-body">
                
              </div>
              <div class="modal-footer">
            
              </div>
          </div>
      </div>
  </div>
  <!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="staticBackdropLabel">Stock Card</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <!-- Grid row for each piece of information -->
        <div id="requesterSummary1">
              
        </div>
        <div class="table-responsive">
          <table class="table">
  
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Product</th>
                <th scope="col">Unit Measure</th>
                <th scope="col">Quantity</th>
              </tr>
            </thead>
            <tbody id="replaceTable1">
           
            </tbody>
          </table>
        </div>
       
      </div>
      <div class="modal-footer">
 
       
      </div>
    </div>
  </div>
</div>
<!-- New Stock Modal -->
<div class="modal fade" id="newStockModal" tabindex="-1" aria-labelledby="newStockModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newStockModalLabel">New Stock Purchase</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="stockForm">
          <div class="mb-3">
            <label for="stockDate" class="form-label">Date</label>
            <input type="date" class="form-control" id="stockDate" required>
          </div>
          <div class="mb-3">
            <label for="warehouse" class="form-label">Warehouse</label>
            <select class="form-select" id="warehouse" required>
              <option value="">Select Warehouse</option>
              <% if (warehouse) { %> <% for (let dat of warehouse) { %>
                <option value="<%= dat.warehouse_name %>"><%= dat.warehouse_name %></option>
                <% } %><% } %>
              <!-- Add more warehouse options as needed -->
            </select>
          </div>
          <div class="mb-3">
            <label for="supplier" class="form-label">Supplier</label>
            <input type="text" class="form-control" id="supplier" required>
          </div>
          <hr>
          <h5>Products</h5>
          <div class="mb-3">
            <label for="product" class="form-label">Product</label>
            <select class="form-select" id="product" required>
              <option value="">Select Product</option>
              <% if (prods) { %> <% for (let dat of prods) { %>
                <option value="<%= dat.product_name %>"><%= dat.product_name %></option>
                <% } %><% } %>
              <!-- Add more product options as needed -->
            </select>
          </div>
          <div class="row">
            <div class="col-md-6">
              <label for="quantity" class="form-label">Quantity</label>
              <input type="number" class="form-control" id="quantity" required>
            </div>
            <div class="col-md-6">
              <label for="unit" class="form-label">Unit Measure</label>
              <select class="form-select" id="unit" required>
                <option value="Kg">Kgs</option>
                <option value="Litres">Litres</option>
                <option value="Bags">Bags</option>
                <option value="Packs">Packs</option>
                <option value="Loaves">Loaves</option>
                <option value="Crates">Crates</option>
                <option value="Heads">Heads</option>
                <option value="Cases">Cases</option>
                <option value="Each">Each</option>
                <!-- Add more unit options as needed -->
              </select>
            </div>
          </div>
          <button type="button" class="btn btn-primary mt-3" id="addProductBtn">Add Product</button>
          <div class="table-responsive mt-3">
            <table class="table table-bordered" id="productTable">
              <thead>
                <tr>
                  <th>No.</th>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Unit Measure</th>
                  <th>Remove</th>
                </tr>
              </thead>
              <tbody id="productTableBody">
                <!-- Product rows will be added dynamically here -->
              </tbody>
            </table>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="saveStockButton">Save Stock</button>
      </div>
    </div>
  </div>
</div>


  


      </div>
    </div>
    <!-- Footer container -->
<div class="main-footer">
  <span>&copy; 2023. Agrifora Management System. All Rights Reserved.</span>
  <span>Created by: <a href="http://soxfort.com" target="_blank">Soxfort Solutions | Intuitive Innovation</a></span>
</div><!-- main-footer -->
        <script src="js/bootstrap/bootstrap.bundle.min.js"></script>
    <script src="js/main.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
   <!-- Add this JavaScript code to your existing script tags or include it in a separate JavaScript file -->
<!-- Include the updated JavaScript code below your existing scripts -->
<script>
  // Sample data for the Reorder Levels table
  const reorderLevelData = [
    {
      productNumber: '001',
      product: 'Bread',
      warehouse: 'Warehouse A',
      unitMeasurement: 'Loaves',
      reorderLevel: 100,
      alertLevel: 110,
      currentLevel: 120,
    },
    {
      productNumber: '002',
      product: 'Milk',
      warehouse: 'Warehouse B',
      unitMeasurement: 'Litres',
      reorderLevel: 50,
      alertLevel: 55,
      currentLevel: 60,
    },
    {
      productNumber: '003',
      product: 'Sugar',
      warehouse: 'Warehouse C',
      unitMeasurement: 'Kgs',
      reorderLevel: 200,
      alertLevel: 210,
      currentLevel: 220,
    },
    // Add more data as needed
  ];

  // Counter for product rows
  let productRowCounter = 1;

  // Function to populate the Reorder Levels table
  function populateReorderLevelsTable() {
    const completedRequisitionsTableBody = document.getElementById('completedRequisitionsTableBody');
    completedRequisitionsTableBody.innerHTML = '';

    reorderLevelData.forEach((item, index) => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${item.productNumber}</td>
        <td>${item.product}</td>
        <td>${item.warehouse}</td>
        <td>${item.unitMeasurement}</td>
        <td>${item.reorderLevel}</td>
        <td>${item.alertLevel}</td>
        <td>${item.currentLevel}</td>
        <td>
          <button class="btn btn-primary view-btn" data-index="${index}" >View</button>
          <button class="btn btn-danger">Delete</button>
        </td>
      `;

      completedRequisitionsTableBody.appendChild(row);
    });

    // Add event listeners to "View" buttons
    const viewButtons = document.querySelectorAll('.view-btn');
    viewButtons.forEach((button) => {
      button.addEventListener('click', handleViewButtonClick);
    });
  }

  // Function to handle "View" button click
  function handleViewButtonClick(event) {
    const index = event.target.getAttribute('data-index');
    const product = reorderLevelData[index];

    // Populate the product details modal
    document.getElementById('productNumberModal').textContent = product.productNumber;
    document.getElementById('productModal').textContent = product.product;
    document.getElementById('warehouseModal').textContent = product.warehouse;
    document.getElementById('unitMeasurementModal').textContent = product.unitMeasurement;
    document.getElementById('reorderLevelModal').textContent = product.reorderLevel;
    document.getElementById('alertLevelModal').textContent = product.alertLevel;
    document.getElementById('currentLevelModal').textContent = product.currentLevel;

    // Show the product details modal
    $('#productDetailsModal').modal('show');
  }

  // Function to add a product row to the table
  function addProductRow() {
    const product = document.getElementById('product').value;
    const quantity = document.getElementById('quantity').value;
    const unit = document.getElementById('unit').value;

    // Validate input
    if (!product || !quantity || !unit) {
      alert('Please fill in all product details.');
      return;
    }

    // Create a new row for the product
    const newRow = document.createElement('tr');
    newRow.innerHTML = `
      <td>${productRowCounter}</td>
      <td>${product}</td>
      <td>${quantity}</td>
      <td>${unit}</td>
      <td>
        <button class="btn btn-danger btn-sm" onclick="removeProductRow(this)">Remove</button>
      </td>
    `;

    // Append the row to the table
    const productTableBody = document.getElementById('productTableBody');
    productTableBody.appendChild(newRow);

    // Clear input fields
    document.getElementById('product').value = '';
    document.getElementById('quantity').value = '';
    document.getElementById('unit').value = '';

    // Increment the product row counter
    productRowCounter++;
  }

  // Function to remove a product row from the table
  function removeProductRow(button) {
    const row = button.parentElement.parentElement;
    row.remove();
  }

  // Function to save the stock data
  function saveStock() {
    const stockDate = document.getElementById('stockDate').value;
    const warehouse = document.getElementById('warehouse').value;
    const supplier = document.getElementById('supplier').value;

   
    // You can add code here to save the stock data, if needed
    
    let products = [];
    $("#productTableBody tr").each(function () {
      const cells = $(this).find("td");
const product = cells.eq(1).text();
const quantity = parseFloat(cells.eq(2).text());
const unit = cells.eq(3).text().trim();
                  products.push({ product, quantity, unit });  
    });
    console.log(stockDate, warehouse, supplier, products);
     // Validate input
     if (!stockDate || !warehouse || !supplier || products.length == 0) {
      alert('Please fill in all details.');
      return;
    }
    // Send data to server
    fetch('/add-stock', {
      method: 'POST',
      body: JSON.stringify({
        stockDate, warehouse, supplier, products
      }),
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      },
    }).then(function (response) { window.location.reload(true); })
      .catch(error => console.error('Error:', error));
    // For this example, we will simply close the modal
    $('#newStockModal').modal('hide');
  }

  // Add event listeners
  document.getElementById('addProductBtn').addEventListener('click', addProductRow);
  document.getElementById('saveStockButton').addEventListener('click', saveStock);

  // Initialize the Reorder Levels table
  populateReorderLevelsTable();
  function reorderLevel(params1) {
    var modal = document.getElementById('reorderModal');
var modalTitle = modal.querySelector('.modal-title');
var modalBody = modal.querySelector('.modal-body');
  // Set the modal title and body content
  modalBody.innerHTML = `
  <form action="/reorder-level" method="post">
    <input type="hidden" name="id" value="${params1}" />
  <div class="modal-header">
                  <h5 class="modal-title" id="reorderModalLabel">Set Reorder Level</h5><br>
                  <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                  </button>
              </div>
              <div class="modal-body">
                  <!-- Add your form elements for setting reorder level here -->
                  <label for="reorderLevel">Reorder Level:</label>
                  <input type="text" class="form-control" name="reorderLevel" id="reorderLevel">
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                  <button type="submit" class="btn btn-primary">Save changes</button>
              </div>   
              </form>       
  `;
            }

</script>
<script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>
<script>

  function openViewModal(params1,params2,params3,params4,params5, params6) {
    var modal = document.getElementById('staticBackdrop');
var modalTitle = modal.querySelector('.modal-title');
var modalBody = modal.querySelector('.modal-body');
var modalFooter = modal.querySelector('.modal-footer');
const requesterSummary = document.getElementById('requesterSummary1');
const replace = document.getElementById('replaceTable1');
let productsArray = JSON.parse(params5);
  // Set the modal title and body content
  const formattedDate = formatDate(params1);
  requesterSummary.innerHTML =  ``;
  requesterSummary.innerHTML =  `
  <div class="row">
          <div class="col-auto">
            <p>Date:</p>
          </div>
          <div class="col">
            <p><b>${formattedDate}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Reference:</p>
          </div>
          <div class="col">
            <p><b>${params2}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Supplier:</p>
          </div>
          <div class="col">
            <p><b>${params3}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Warehouse:</p>
          </div>
          <div class="col">
            <p><b>${params4}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>No. of products:</p>
          </div>
          <div class="col">
            <p><b>${params6}</b></p>
          </div>
        </div>
       
  `;
  let count =1;
  replace.innerHTML = ``;
          productsArray.forEach((product) => {
            if (product.stock_id+'' === params2) {
                 replace.innerHTML += `
                 <tr>
              <td>${count}</td>
              <td>${product.product_name}</td>
              <td>${product.unit}</td>
              <td>${product.quantity}</td>
                 </tr>
                 
                 `;
           
                count +=1
            }
             });
  modalFooter.innerHTML = `       <button type="button" class="btn btn-primary" onclick="exportToExcel('${params1}','${params2}','${params3}','${params4}','${params6}')"><i class="fa-download"></i>Export</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>`;
            }
            function openViewModal2(params1,params2,params3,params4,params5) {
             
    var modal = document.getElementById('staticBackdrop');
var modalTitle = modal.querySelector('.modal-title');
var modalBody = modal.querySelector('.modal-body');
var modalFooter = modal.querySelector('.modal-footer');
const requesterSummary = document.getElementById('requesterSummary1');
const replace = document.getElementById('replaceTable1');
let productsArray = params5;
console.log(params5)
  // Set the modal title and body content
  const formattedDate = formatDate(params1);
  requesterSummary.innerHTML =  ``;
  requesterSummary.innerHTML =  `
  <div class="row">
          <div class="col-auto">
            <p>Date:</p>
          </div>
          <div class="col">
            <p><b>${formattedDate}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Reference:</p>
          </div>
          <div class="col">
            <p><b>${params2}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Supplier:</p>
          </div>
          <div class="col">
            <p><b>${params3}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>Warehouse:</p>
          </div>
          <div class="col">
            <p><b>${params4}</b></p>
          </div>
        </div>
      
        <div class="row">
          <div class="col-auto">
            <p>No. of products:</p>
          </div>
          <div class="col">
            <p><b>${productsArray.length}</b></p>
          </div>
        </div>
       
  `;
  let count =1;
  replace.innerHTML = ``;
          productsArray.forEach((product) => {
            if (product.stock_id+'' === params2) {
                 replace.innerHTML += `
                 <tr>
              <td>${count}</td>
              <td>${product.product_name}</td>
              <td>${product.unit}</td>
              <td>${product.quantity}</td>
                 </tr>
                 
                 `;
           
                count +=1
            }
             });
  modalFooter.innerHTML = `       <button type="button" class="btn btn-primary"><i class="fa-download"></i>Export</button>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>`;
            }
   
            function updateTable(params, params1) {
              const tableBody = document.getElementById("alex");
              const fromDate = document.getElementById("fromDate").value;
    const toDate = document.getElementById("toDate").value;
              let productsArray = JSON.parse(params);
              let stock_products = JSON.parse(params1);
              if(fromDate && toDate){
    tableBody.innerHTML = ""; // Clear the table body
   

    productsArray.forEach((movement) => {
      if( movement.stock_date >= fromDate && movement.stock_date <= toDate){
      const row = document.createElement("tr");
      const formattedDate = formatDate(movement.stock_date);
      let productCount = 0;
                        for (let productData of stock_products) {
                          if (productData.stock_id === movement.stock_id) {
                            productCount++;
                          }
                        }
     
        row.innerHTML = `
                      <td>${formattedDate}</td>
                      <td>${movement.stock_id}</td>
                      <td>${productCount}</td>
                      <td>${movement.supplier}</td>
                      <td>${movement.warehouse}</td>
                      <td>
                        <a href="#" class="btn btn-primary btn-sm view-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="openViewModal2('${movement.stock_date}','${movement.stock_id}','${movement.supplier}','${movement.warehouse}','JSON.stringify(${stock_products})')">View</a>
                        <a href="#" class="btn btn-danger btn-sm">Delete</a>
                      </td>
    `;
      
      tableBody.appendChild(row);
                    }
    });
  } else {
      // Display a message or handle the case when either fromDate or toDate is empty
      window.alert("Please select both From Date and To Date.");
    }
    
  }
  function exportToExcel(params1,params2,params3,params4,params6) {
// Create a new workbook
const workbook = new ExcelJS.Workbook();

// Add a worksheet
const worksheet = workbook.addWorksheet('Stock Card');

// Get modal data
const requesterSummary = document.getElementById('requesterSummary1');
const replaceTable = document.getElementById('replaceTable1');

// Extract text content from requesterSummary
const requesterSummaryText = requesterSummary.textContent.trim();

// Split requesterSummaryText into separate lines based on the newline character
const requesterSummaryLines = requesterSummaryText.split('\n');

// Add requester summary data to a single row with multiple cells
const summaryRow = worksheet.addRow(['Date:', 'Reference:', 'Supplier:', 'Warehouse:', 'No. of products:']);
summaryRow.eachCell({ includeEmpty: true }, (cell) => {
  cell.width = 25; // Set cell width to 210 pixels
});
summaryRow.font = { bold: true };

// Set cell values for requester summary
summaryRow.getCell(1).value = 'Date: ' + formatDate(params1);
summaryRow.getCell(2).value = 'Reference: ' + params2;
summaryRow.getCell(3).value = 'Supplier: ' + params3;
summaryRow.getCell(4).value = 'Warehouse: ' + params4;
summaryRow.getCell(5).value = 'No. of products: ' + params6;

// Write table headers to worksheet
worksheet.addRow(['#', 'Product', 'Unit Measure', 'Quantity']);

// Iterate over table rows and write data to worksheet
replaceTable.querySelectorAll('tr').forEach(row => {
  const rowData = [];
  row.querySelectorAll('td').forEach(cell => {
    rowData.push(cell.textContent);
  });
  worksheet.addRow(rowData);
});

// Set column widths to 210 pixels
worksheet.columns.forEach(column => {
  column.width = 25;
});

// Generate the Excel file
workbook.xlsx.writeBuffer().then(buffer => {
  // Convert buffer to Blob
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
  // Create download link
  const downloadLink = document.createElement('a');
  downloadLink.href = window.URL.createObjectURL(blob);
  downloadLink.download = 'Stock_Card.xlsx';
  // Trigger download
  downloadLink.click();
}).catch(error => {
  console.error('Error exporting Excel:', error);
  alert('Error exporting Excel. Please try again.');
});

}
function exportToExcel1() {
  // Create a new workbook
  const workbook = new ExcelJS.Workbook();

  // Add worksheet for Purchases
  const purchasesWorksheet = workbook.addWorksheet('Purchases');
  const purchaseHeaders = ['Date', 'Reference Number', 'Number of Products', 'Supplier', 'Warehouse'];
  addTableDataToWorksheet(purchasesWorksheet, 'alex', purchaseHeaders);
  makeHeadersBold(purchasesWorksheet);

  // Add worksheet for Reorder Level
  const reorderLevelWorksheet = workbook.addWorksheet('Reorder Level');
  const reorderLevelHeaders = ['Product ID', 'Product', 'Unit Measure', 'Reorder Level', 'Current Stock Level', 'Last Stock In Date', 'Last Issue Date'];
  addTableDataToWorksheet(reorderLevelWorksheet, 'completed', reorderLevelHeaders);
  makeHeadersBold(reorderLevelWorksheet);

  // Generate the Excel file
  workbook.xlsx.writeBuffer().then(buffer => {
    // Convert buffer to Blob
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    // Create download link
    const downloadLink = document.createElement('a');
    downloadLink.href = window.URL.createObjectURL(blob);
    downloadLink.download = 'Requisitions.xlsx';
    // Trigger download
    downloadLink.click();
  }).catch(error => {
    console.error('Error exporting Excel:', error);
    alert('Error exporting Excel. Please try again.');
  });
}

function addTableDataToWorksheet(worksheet, tableId, headers) {
  const table = document.getElementById(tableId);
  const rows = table.querySelectorAll('tr');

  // Add table headers as the first row in the worksheet
  worksheet.addRow(headers);

  // Add table data
  rows.forEach((row, index) => {
    if (index === 0) return; // Skip the first row (headers)
    const rowData = [];
    // Only include the columns specified in headers
    row.querySelectorAll('td').forEach((cell, cellIndex) => {
      if (cellIndex < headers.length) {
        rowData.push(cell.textContent);
      }
    });
    worksheet.addRow(rowData);
  });
}

function makeHeadersBold(worksheet) {
  worksheet.eachRow({ includeEmpty: true }, function(row, rowNumber) {
    row.eachCell({ includeEmpty: true }, function(cell, colNumber) {
      if (rowNumber === 1) {
        cell.font = { bold: true };
        worksheet.getColumn(colNumber).width = 25;
      }
    });
  });
}

  function formatDate(dateString) {
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const day = String(date.getDate()).padStart(2, "0");
    return `${day}/${month}/${year}`;
  }

</script>
