
        <div class="mx-auto ms-lg-80 ps-lg-4">
          <% for (let error of errors) { %>
            <div class="alert alert-danger" role="alert"><%= error.message %></div>
            <% } %> <% if(message.success){ %>
            <div class="alert alert-success" role="alert"><%= message.success %></div>
            <% } %>
      <section>
        <div class="p-8 bg-white navbar-light">
          <div class="row align-items-center justify-content-between">
            <div class="col-12 col-lg-6 mb-4 mb-lg-0">
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                  <li class="breadcrumb-item" aria-current="page">
                    <a class="d-flex align-items-center" href="#">
                      <svg class="text-primary me-2" width="20" height="20" viewbox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M16.8737 16.875V9.02647C16.8737 8.93939 16.8555 8.85327 16.8202 8.77363C16.785 8.694 16.7335 8.6226 16.6691 8.56402L10.4187 2.88159C10.3036 2.77699 10.1537 2.71904 9.99821 2.71904C9.84272 2.71905 9.69281 2.77701 9.57777 2.88162L3.3282 8.56402C3.26377 8.6226 3.2123 8.69399 3.17707 8.77363C3.14185 8.85326 3.12366 8.93937 3.12366 9.02645V16.875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M1.24866 16.875H18.7487" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M11.8732 16.8743V12.4993C11.8732 12.3336 11.8073 12.1746 11.6901 12.0574C11.5729 11.9402 11.4139 11.8743 11.2482 11.8743H8.74817C8.58241 11.8743 8.42344 11.9402 8.30623 12.0574C8.18902 12.1746 8.12317 12.3336 8.12317 12.4993V16.8743" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                      </svg>
                      <span>Settings</span>
                    </a>
                  </li>
                  <li class="breadcrumb-item active" aria-current="page">
                    <a class="d-flex align-items-center" href="#">
                      <svg class="text-primary me-2" width="20" height="20" viewbox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M17.8125 16.25H2.1875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M7.8125 16.25V6.875H12.1875" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M16.5625 3.125H12.1875V16.25H16.5625V3.125Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                        <path d="M3.4375 16.25V10.625H7.8125" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
                      </svg>
                      <span>Delivery Centers</span>
                    </a>
                  </li>
                </ol>
              </nav>
            </div>
          
          </div>
        </div>
      </section>
 <!-- Statistics -->
<div class="row">
  <div class="col-md-4">
    <div class="card bg-primary text-white">
      <div class="card-body">
        <h5 class="card-title">Provinces</h5>
        
<% 
// Create an empty object to store unique provinces
const uniqueProvinces = {};

// Iterate through the units array to count unique provinces
units.forEach(unit => {
  // Check if the province already exists in the uniqueProvinces object
  if (!uniqueProvinces[unit.province]) {
    // If not, add it to the object
    uniqueProvinces[unit.province] = 1;
  } else {
    // If it exists, increment the count
    uniqueProvinces[unit.province]++;
  }
});

// Get the count of unique provinces
const uniqueProvinceCount = Object.keys(uniqueProvinces).length;
%>
        <p class="card-text" id="provincesStat"> <%= uniqueProvinceCount %></p> 
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card bg-success text-white">
      <div class="card-body">
        <h5 class="card-title">Units</h5>
        <p class="card-text" id="unitsStat"><%= units.length %></p>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card bg-warning text-white">
      <div class="card-body">
        <h5 class="card-title">Delivery Points</h5>
        <% 
// Create an empty object to store unique delivery points
const uniqueDeliveryPoints = {};

// Iterate through the units array to count unique delivery points
units.forEach(unit => {
  // Check if the delivery point already exists in the uniqueDeliveryPoints object
  if (!uniqueDeliveryPoints[unit.delivery_point]) {
    // If not, add it to the object
    uniqueDeliveryPoints[unit.delivery_point] = 1;
  } else {
    // If it exists, increment the count
    uniqueDeliveryPoints[unit.delivery_point]++;
  }
});

// Get the count of unique delivery points
const uniqueDeliveryPointCount = Object.keys(uniqueDeliveryPoints).length;
%>
        <p class="card-text" id="deliveryPointsStat"> <%= uniqueDeliveryPointCount %></p>
      </div>
    </div>
  </div>
</div>
<br></br>
  <!-- Button Group -->
  <div class="btn-group">
      <button type="button" class="btn btn-primary"  data-bs-toggle="modal"
          data-bs-target="#addUnitModal">
        <i class="fas fa-edit"></i>New Unit
      </button>
  
      <div class="btn-group">
          <button type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown">
            <i class="fas fa-file"></i>Generate Report
          </button>
          <ul class="dropdown-menu">
              <li><button class="dropdown-item btn " onclick="exportToExcel()">Excel</button></li>
           
          </ul>
      </div>
  </div>
  <br></br>
  <!-- Search Bar -->
  <div class="input-group mb-3">
    <input
    type="text"
    id="searchInput"
    class="form-control mb-3"
    placeholder="Search..." />
  </div>

  <!-- Table -->
  <table class="table table-striped table-hover">
    <thead class="table-primary">
          <tr>
              <th scope="col">Unit No.</th>
              <th scope="col">Unit Name</th>
              <th scope="col">Location</th>
              <th scope="col">Delivery Point</th>
              <th scope="col">Contact Person</th>
              <th scope="col">Phone Number</th>
              <th scope="col">Actions</th>
          </tr>
      </thead>
      <tbody>
        <% if (units.length > 0) { %>
          <% for (let dat of units) { %>
          <tr>
              <th scope="row"><%= dat.id %></th>
              <td><a href="/centermovement"><%= dat.unit_name %></a></td> 
              <td><%= dat.location %></td>
              <td><%= dat.delivery_point %></td>
              <td><%= dat.contact_person %></td>
              <td><%= dat.phone %></td>
              <td>
                  <a href="#"><i class="fas fa-edit"></i></a>
                  <a href="#"><i class="fas fa-trash"></i></a>
              </td>
          </tr>
          <% } %>
          <% } %>
          <!-- Additional table rows -->
      </tbody>
  </table>

  <!-- Pagination -->  
  <nav>
      <ul class="pagination justify-content-center">
          <li class="page-item disabled">
              <a class="page-link">Previous</a>
          </li>
          <li class="page-item"><a class="page-link" href="#">1</a></li>
          <li class="page-item"><a class="page-link" href="#">2</a></li>
          <li class="page-item"><a class="page-link" href="#">3</a></li>
          <li class="page-item">
              <a class="page-link" href="#">Next</a>
          </li>
      </ul>
  </nav>

  <!-- Add Unit Modal -->
  <div class="modal fade" id="addUnitModal" tabindex="-1" aria-labelledby="addUnitModalLabel" aria-hidden="true">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="addUnitModalLabel">Add New Unit</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <form action="/add-unit" method="post">
                  <div class="modal-body">
                      <div class="mb-3">
                          <label for="unitName" class="form-label">Unit Name</label>
                          <input type="text" class="form-control" id="unitName" name="unitName" required>
                      </div>
                      <div class="mb-3">
                          <label for="location" class="form-label">Location</label>
                          <input type="text" class="form-control" id="location" name="location" required>
                      </div>
                      <div class="mb-3">
                        <label for="province" class="form-label">Province</label>
                        <input type="text" class="form-control" id="province" name="province" required>
                    </div>
                      <div class="mb-3">
                          <label for="deliveryPoint" class="form-label">Delivery Point</label>
                          <input type="text" class="form-control" id="deliveryPoint" name="deliveryPoint" required>
                      </div>
                      <div class="mb-3">
                          <label for="contactPerson" class="form-label">Contact Person</label>
                          <input type="text" class="form-control" id="contactPerson" name="contactPerson" required>
                      </div>
                      <div class="mb-3">
                          <label for="phoneNumber" class="form-label">Phone Number</label>
                          <input type="text" class="form-control" id="phoneNumber" name="phoneNumber" required>
                      </div>
                  </div>
                  <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                      <button type="submit" class="btn btn-primary" id="saveUnit">Save Unit</button>
                  </div>
              </form>
          </div>
      </div>
  </div>
</div>

<!-- Include Bootstrap and jQuery JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
  // Open modal on button click
  $("#addUnitBtn").click(function() {
      $("#addUnitModal").modal("show");
  });

  // Dummy data for the table (you should replace this with actual data)
  const dummyData = [
      {
          unitNo: 1,
          unitName: "<a href='centermovement.html'>Harare Main</a>",
          location: "Harare",
          deliveryPoint: "Msasa Garrsion",
          contactPerson: "John Doe",
          phoneNumber: "0770000000"
      },
      // Add more data as needed
  ];



  // Add Unit Button Click Event
  $("#saveUnit").click(function() {
      // Retrieve data from the form
      const unitName = $("#unitName").val();
      const location = $("#location").val();
      const deliveryPoint = $("#deliveryPoint").val();
      const contactPerson = $("#contactPerson").val();
      const phoneNumber = $("#phoneNumber").val();

      // Create a new unit object
      const newUnit = {
          unitNo: dummyData.length + 1,
          unitName,
          location,
          deliveryPoint,
          contactPerson,
          phoneNumber,
      };

      // Add the new unit to the dummy data array
      dummyData.push(newUnit);

      // Update the table with the new data
      populateTable(dummyData);

      // Clear the form
      $("#newUnitForm")[0].reset();

      // Close the modal
      $("#addUnitModal").modal("hide");

      // Show a success alert for 1 second
      const successAlert = $('<div class="alert alert-success" role="alert">Unit added successfully!</div>');
      successAlert.appendTo('.container').fadeIn('slow').delay(1000).fadeOut('slow', function() {
          $(this).remove();
      });
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>
<script>
  function exportToExcel() {
  // Create a new workbook
  const workbook = new ExcelJS.Workbook();

  // Add a worksheet
  const worksheet = workbook.addWorksheet('Units');

  // Add column headers with bold font style
  const headers = [ 'Unit Name', 'Location', 'Delivery Point', 'Contact Person', 'Phone Number'];
  worksheet.addRow(headers).font = { bold: true };

  // Add data from the table
  const rows = document.querySelectorAll('table tbody tr');
  rows.forEach(row => {
    const rowData = [];
    row.querySelectorAll('td').forEach(cell => {
      rowData.push(cell.textContent.trim());
    });
    worksheet.addRow(rowData);
  });
   // Set column widths
   worksheet.columns.forEach(column => {
    column.width = 25;
  });

  // Generate the Excel file
  workbook.xlsx.writeBuffer().then(buffer => {
    // Convert buffer to Blob
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    // Create download link
    const downloadLink = document.createElement('a');
    downloadLink.href = window.URL.createObjectURL(blob);
    downloadLink.download = 'Units.xlsx';
    // Trigger download
    downloadLink.click();
  }).catch(error => {
    console.error('Error exporting Excel:', error);
    alert('Error exporting Excel. Please try again.');
  });
}

</script>